/**
 * @fileoverview Content validator for quiz question generation.
 * This module handles validating and parsing the content generated by Gemini AI.
 */

const logger = require('@utils/logger');
const { logContentToFile } = require('./fileOperations');
const { extractJsonFromCodeBlocks, extractArrayContent } = require('./extractors');
const { parseJsonContent, extractQuestionsArray } = require('./parsers');
const { validateQuestions } = require('./validators');

/**
 * Validates that the generated content is valid JSON and matches the expected schema
 *
 * @param {string} content - The generated content from Gemini AI
 * @param {boolean} [strictMode=false] - If true, throw errors instead of trying to fix issues (used for tests)
 * @returns {Object[]} The parsed questions array
 * @throws {Error} If the content is invalid or doesn't match the schema
 */
function validateGeneratedContent(content, strictMode = false) {
  try {
    if (!content || typeof content !== 'string') {
      throw new Error('Content is empty or not a string');
    }

    // Log the original content for debugging (truncated)
    logger.info('Original content (first 200 chars):', content.substring(0, 200));

    // Log the full content to a separate log file for detailed debugging
    logContentToFile(content);

    // Step 1: Clean the response string to extract JSON
    let contentToProcess = content.trim();
    let originalContent = contentToProcess;

    // Step 2: Handle various markdown code block formats
    contentToProcess = extractJsonFromCodeBlocks(contentToProcess);

    // Step 3: Look for array brackets if we still don't have valid JSON
    contentToProcess = extractArrayContent(contentToProcess);

    // Log the cleaned content
    logger.info('Cleaned content (first 200 chars):', contentToProcess.substring(0, 200));

    // Step 4: Try to parse the content as JSON
    const parsedContent = parseJsonContent(contentToProcess, originalContent);

    // Step 5: Validate that it's an array
    const questionsArray = extractQuestionsArray(parsedContent, strictMode);

    // Step 6: Validate each question has the required fields
    return validateQuestions(questionsArray, strictMode);
  } catch (error) {
    // Log the full error with stack trace
    logger.error('Content validation failed with error:', error);

    // Throw a more descriptive error
    throw new Error(`Invalid generated content: ${error.message}`);
  }
}

module.exports = {
  validateGeneratedContent,
};
