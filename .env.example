APP_PORT=8000
PORT=3000
MONGODB_URI=mongodb://mongodb:27017
DB_NAME=hirebot_db
JWT_SECRET=secret

SWAGGER_URL=http://localhost:8000

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=
JOB_POLLING_INTERVAL=5000

# Gemini AI Configuration
GEMINI_API_KEY=
GEMINI_MODEL=gemini-2.0-flash
GEMINI_API_BASE_URL=https://generativelanguage.googleapis.com/v1beta
GEMINI_MAX_OUTPUT_TOKENS=8192
GEMINI_TEMPERATURE=0.7
GEMINI_TMP_DIR=/tmp
PAGE_SIZE_EXISTING_QUESTIONS=1000

# Position Configuration - Difficulty Text
POSITION_DIFFICULTY_TEXT_INTERN="basic understanding of programming concepts"
POSITION_DIFFICULTY_TEXT_FRESHER="fundamental programming knowledge"
POSITION_DIFFICULTY_TEXT_JUNIOR="practical application of programming concepts"
POSITION_DIFFICULTY_TEXT_MIDDLE="intermediate understanding of software development"
POSITION_DIFFICULTY_TEXT_SENIOR="deep understanding of scalable systems and best practices"
POSITION_DIFFICULTY_TEXT_EXPERT="advanced architectural thinking and system design expertise"

# Position Configuration - Instructions
POSITION_INSTRUCTION_INTERN="suitable for an intern-level candidate"
POSITION_INSTRUCTION_FRESHER="appropriate for a fresher with limited experience"
POSITION_INSTRUCTION_JUNIOR="targeted at a junior developer with some experience"
POSITION_INSTRUCTION_MIDDLE="designed for a mid-level developer with solid experience"
POSITION_INSTRUCTION_SENIOR="targeted at a senior developer with extensive experience"
POSITION_INSTRUCTION_EXPERT="challenging for expert-level developers and architects"

# Position Configuration - Levels
POSITION_LEVEL_INTERN=1
POSITION_LEVEL_FRESHER=2
POSITION_LEVEL_JUNIOR=3
POSITION_LEVEL_MIDDLE=4
POSITION_LEVEL_SENIOR=5
POSITION_LEVEL_EXPERT=6
AI_QUIZ_PROMPT_TEMPLATE="Generate 10 unique multiple-choice technical interview questions for software engineers on '{topic}' in '{language}'. {positionInstruction} Questions should be {difficultyText}.

Key Requirements:
1. JSON format: {schema}
2. 4 options per question
3. `correctAnswer`: integer 0-3 (index)
4. Detailed explanation for each correct answer
5. Assign appropriate difficulty (easy, medium, hard)
6. Relevant category for each question (e.g., Algorithms, JavaScript, System Design)
7. Exclude questions in: {existingQuestions}
8. Return ONLY a JSON array of questions.

Example format:
{example}
Generate 10 questions in this format."